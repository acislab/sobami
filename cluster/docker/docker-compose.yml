networks:
  host:
    name: host
    external: true

services:
  ray-head:
    image: ${SWARM_MANAGER_DOCKER_IMAGE}
    entrypoint: /bin/bash
    command: >
      -c "ray start --head --block --port=$RAY_HEAD_NODE_PORT --dashboard-host=$RAY_DASHBOARD_HOST --dashboard-port=$RAY_DASHBOARD_PORT"
    networks:
      - host
    volumes:
      - ${SWARM_MANAGER_PATH_TO_HF_HOME}:/root/.cache/huggingface
      - ${SWARM_MANAGER_PATH_TO_TMP_RAY}:/tmp/ray
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - NCCL_SOCKET_IFNAME=${RAY_HEAD_ETHERNET_DEVICE}
      - GLOO_SOCKET_IFNAME=${RAY_HEAD_ETHERNET_DEVICE}
      - RAY_PROMETHEUS_HOST=${RAY_PROMETHEUS_HOST}
      - RAY_GRAFANA_HOST=${RAY_GRAFANA_HOST}
      - RAY_PROMETHEUS_NAME=${RAY_PROMETHEUS_NAME}
    deploy:
      placement:
        constraints:
          - node.role == manager
      mode: replicated
      replicas: 1
      restart_policy:
          condition: on-failure
      resources:
        limits:
          memory: ${MEMORY_SIZE}
          cpus: ${CPUS}
        reservations:
          generic_resources:
            - discrete_resource_spec:
                kind: "NVIDIA-GPU"
                value: ${RAY_HEAD_GPU_COUNT}

  ray-worker:
    image: ${SWARM_MANAGER_DOCKER_IMAGE}
    networks:
      - host
    entrypoint: /bin/bash
    command: >
       -c "until ray start --block --address=$RAY_HEAD_NODE_IP:$RAY_HEAD_NODE_PORT; do echo 'Waiting for ray-head...'; sleep 5; done"
    volumes:
      - ${SWARM_WORKER_PATH_TO_HF_HOME}:/root/.cache/huggingface
      - ${SWARM_WORKER_PATH_TO_TMP_RAY}:/tmp/ray
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - NCCL_SOCKET_IFNAME=${RAY_WORKER_1_ETHERNET_DEVICE}
      - GLOO_SOCKET_IFNAME=${RAY_WORKER_1_ETHERNET_DEVICE}
    deploy:
      placement:
        constraints:
          - node.role == worker
      mode: replicated
      replicas: 1
      restart_policy:
          condition: on-failure
      resources:
        limits:
          memory: ${MEMORY_SIZE}
          cpus: ${CPUS}
        reservations:
          generic_resources:
            - discrete_resource_spec:
                kind: "NVIDIA-GPU"
                value: ${RAY_WORKER_1_GPU_COUNT}

  prometheus:
    image: ${PROMETHEUS_DOCKER_IMAGE}
    volumes:
      - ${PROMETHEUS_STORAGE_PATH}:/prometheus:rw
      - ${PROMETHEUS_RAY_DISCOVERY_JSON_PATH}:/etc/targets/prom_metrics_service_discovery.json
      - ${PROMETHEUS_CHAT_BACKEND_DISCOVERY_JSON_PATH}:/etc/targets/backend_prom_metrics_service_discovery.json
      - ${PROMETHEUS_CONFIG_PATH}:/etc/configs:rw
    command:
      - '--config.file=/etc/configs/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - host
    deploy:
      placement:
        constraints:
          - node.role == manager
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
          limits:
            memory: ${SERVICE_MEMORY}
            cpus: ${SERVICE_CPUS}

  grafana:
    image: ${GRAFANA_DOCKER_IMAGE}
    volumes:
      - ${GRAFANA_STORAGE_PATH}:/var/lib/grafana:rw
    networks:
      - host
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
    deploy:
      placement:
        constraints:
          - node.role == manager
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
          limits:
            memory: ${SERVICE_MEMORY}
            cpus: ${SERVICE_CPUS}

